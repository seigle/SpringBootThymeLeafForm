Using the Eclipse internal Spring Boot Initializr interface to create a deployable app for Apache Tomcat server with ThymeLeaf.

YouTube video:

https://www.youtube.com/watch?v=-IMvhBWwQrc&list=PLR2yPNIFMlL-33mG4qF8dkq0R4q5887Rq

	"Spring Boot Thymeleaf Form Handling Tutorial" by Code Java.


build.gradle content:   	------------

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

							------



settings.gradle content:   -----

rootProject.name = 'SpringBootThymeLeafForm'

						   -----


Changes for external deployment:
	Add the configuration override in ServletInitializer.java
	
	See the implementation in:
		com.example.demo.ServletInitializer.java
		com.example.demo.SpringBootThymeLeafFormApplication.java
	

Build steps:

	Gradle Tasks:
	
		build:clean
		build:bootWar
			
			to build the application to run on an external Tomcat application server.
			
	Load the WAR file in the Tomcat server:
		Move the <project>/build/libs/SpringBootThymeLeafForm-0.0.1-SNAPSHOT.war  file
	
			to <Tomcat installation>/webapps  directory
		
			The server should automatically pick up the changes, if configured that way and server is running.
			
		or go into the console
		
		